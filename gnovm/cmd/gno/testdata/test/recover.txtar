# Test recovering

gno test -v -run 'TestRecover$' .


stdout 'recovered bad panic!'
stdout '--- PASS'
stderr 'ok  '

gno test -v -run 'TestRecoverSkip$' .


stdout 'skipped'
! stdout 'recovered.*testing.Recover'
stdout '--- SKIP'
stderr 'ok  '

gno test -v -run 'TestBadRecoverSkip$' .


# should contain warning about using testing.Recover
stdout 'recovered.*testing.Recover'
# the test will still be marked as skipped
stdout '--- SKIP'
stderr 'ok  '

-- recov.gno --
package recov

-- recov_test.gno --
package recov

import "testing"

type RecoverySetter struct {
	value interface{}
}

func (s *RecoverySetter) Set(v interface{}) {
	s.value = v
}

func TestRecover(t *testing.T) {
	var setter RecoverySetter
	defer func() {
		t.Log("recovered", setter.value)
	}()
	defer testing.Recover(&setter)

	panic("bad panic!")
}

func TestRecoverSkip(t *testing.T) {
	var setter RecoverySetter
	defer func() {
		t.Log("recovered", setter.value)
	}()
	defer testing.Recover(&setter)

	t.Skip("skipped")
	panic("bad panic!")
}

func TestBadRecoverSkip(t *testing.T) {
	defer func() {
		err := recover()
		t.Log("recovered", err)
	}()

	t.Skip("skipped")
	panic("bad panic!")
}
