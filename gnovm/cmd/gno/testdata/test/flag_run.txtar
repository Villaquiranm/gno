# Run test on gno.land/p/demo/ufmt

gno test .

gno test ./run_test.gno

gno test -v .

stdout '=== RUN   TestRun/hello'
stdout '=== RUN   TestRun/hi_you'
stdout '=== RUN   TestRun/hi_me'
stdout '=== RUN   TestRun'
stdout '--- PASS: TestRun'

gno test -v -run .* .

stdout '=== RUN   TestRun/hello'
stdout '=== RUN   TestRun/hi_you'
stdout '=== RUN   TestRun/hi_me'
stdout '=== RUN   TestRun'
stdout '--- PASS: TestRun'

gno test -v -run NotExists .

! stdout '=== RUN   TestRun'

gno test -v -run .*/hello .


stdout '=== RUN   TestRun/hello'
! stdout '=== RUN   TestRun/hi_you'
! stdout '=== RUN   TestRun/hi_me'
stdout '=== RUN   TestRun'
stdout '--- PASS: TestRun'

gno test -v -run .*/hi .


! stdout '=== RUN   TestRun/hello'
stdout '=== RUN   TestRun/hi_you'
stdout '=== RUN   TestRun/hi_me'
stdout '=== RUN   TestRun'
stdout '--- PASS: TestRun'

gno test -v -run .*/NotExists .


stdout '=== RUN   TestRun'
stdout '--- PASS: TestRun'

gno test -v -run Run/.* .


stdout '=== RUN   TestRun/hello'
stdout '=== RUN   TestRun/hi_you'
stdout '=== RUN   TestRun/hi_me'
stdout '=== RUN   TestRun'
stdout '--- PASS: TestRun'

gno test -v -run Run/ .


stdout '=== RUN   TestRun/hello'
stdout '=== RUN   TestRun/hi_you'
stdout '=== RUN   TestRun/hi_me'
stdout '=== RUN   TestRun'
stdout '--- PASS: TestRun'

gno test -v -run Run/hello .


stdout '=== RUN   TestRun/hello'
! stdout '=== RUN   TestRun/hi_you'
! stdout '=== RUN   TestRun/hi_me'
stdout '=== RUN   TestRun'
stdout '--- PASS: TestRun'

-- run.gno --
package run

-- run_test.gno --
package run

import (
	"fmt"
	"testing"
)

func TestRun(t *testing.T) {
	cases := []string {
		"hello",
		"hi you",
		"hi me",
	}
	for _, tc := range cases {
		t.Run(tc, func(t *testing.T) {})
	}
}
